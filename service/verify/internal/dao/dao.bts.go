// Code generated by kratos tool genbts. DO NOT EDIT.

/*
  Package dao is a generated cache proxy package.
  It is generated from:
  type Dao interface {
		// bts: -nullcache=&vrfapi.Token{} -check_null_code=$!=nil
		GetKey(c context.Context, id int64) (key *vrfapi.Token, err error)
		InsertKey(c context.Context, key *vrfapi.Token) error
		UpdateKey(c context.Context, key *vrfapi.Token) error
		Close()
	}
*/

package dao

import (
	"context"

	"github.com/bilibili/kratos/pkg/cache"
	vrfapi "verify/api"
)

// GetKey get data from cache if miss will call source method, then add to cache.
func (d *dao) GetKey(c context.Context, id int64) (res *vrfapi.Token, err error) {
	addCache := true
	res, err = d.CacheToken(c, id)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res != nil {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:GetKey")
		return
	}
	cache.MetricMisses.Inc("bts:GetKey")
	res, err = d.RawGetKey(c, id)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &vrfapi.Token{}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheToken(c, id, miss)
	})
	return
}
